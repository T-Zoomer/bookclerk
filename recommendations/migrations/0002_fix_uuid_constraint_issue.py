# Generated by Django 5.2.5 on 2025-08-18 19:19

import uuid
from django.db import migrations


def fix_constraint_migration(apps, schema_editor):
    """
    Fix the constraint issue by properly handling the foreign key constraint
    that depends on the primary key we're trying to change.
    """
    db_alias = schema_editor.connection.alias
    vendor = schema_editor.connection.vendor
    
    # Only run this migration on PostgreSQL
    if vendor != 'postgresql':
        return
    
    with schema_editor.connection.cursor() as cursor:
        # Check if we still have the old integer/bigint primary key
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name='recommendations_recommendationrequest' 
            AND column_name='id'
        """)
        result = cursor.fetchone()
        
        if result and result[1] in ('bigint', 'integer'):
            # Find the actual foreign key constraint name
            cursor.execute("""
                SELECT constraint_name 
                FROM information_schema.table_constraints 
                WHERE table_name='recommendations_bookrecommendation' 
                AND constraint_type='FOREIGN KEY'
                AND constraint_name LIKE '%request_id%'
            """)
            fk_constraint = cursor.fetchone()
            
            if fk_constraint:
                fk_name = fk_constraint[0]
                
                # Now perform the migration properly
                # 1. Add temporary UUID column
                cursor.execute("ALTER TABLE recommendations_recommendationrequest ADD COLUMN temp_id UUID")
                
                # 2. Update existing records with new UUIDs and cascade to related tables
                cursor.execute("SELECT id FROM recommendations_recommendationrequest ORDER BY id")
                old_ids = [row[0] for row in cursor.fetchall()]
                
                for old_id in old_ids:
                    new_uuid = str(uuid.uuid4())
                    cursor.execute("UPDATE recommendations_recommendationrequest SET temp_id = %s WHERE id = %s", [new_uuid, old_id])
                    cursor.execute("UPDATE recommendations_bookrecommendation SET request_id = %s WHERE request_id = %s", [new_uuid, old_id])
                
                # 3. Drop the foreign key constraint first (using the actual constraint name)
                cursor.execute(f"ALTER TABLE recommendations_bookrecommendation DROP CONSTRAINT {fk_name}")
                
                # 4. Drop the primary key constraint
                cursor.execute("ALTER TABLE recommendations_recommendationrequest DROP CONSTRAINT recommendations_recommendationrequest_pkey")
                
                # 5. Drop the old id column and rename temp_id to id
                cursor.execute("ALTER TABLE recommendations_recommendationrequest DROP COLUMN id")
                cursor.execute("ALTER TABLE recommendations_recommendationrequest RENAME COLUMN temp_id TO id")
                
                # 6. Add the new primary key constraint
                cursor.execute("ALTER TABLE recommendations_recommendationrequest ADD PRIMARY KEY (id)")
                
                # 7. Recreate the foreign key constraint with UUID type
                cursor.execute("""
                    ALTER TABLE recommendations_bookrecommendation 
                    ADD CONSTRAINT recommendations_bookrecommendation_request_id_fkey 
                    FOREIGN KEY (request_id) REFERENCES recommendations_recommendationrequest(id) ON DELETE CASCADE
                """)


def reverse_fix_constraint_migration(apps, schema_editor):
    """Reverse migration - not implemented as this is destructive"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('recommendations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(fix_constraint_migration, reverse_fix_constraint_migration),
    ]
