# Generated by Django 5.2.5 on 2025-08-18 19:15

import uuid
from django.db import migrations, models


def migrate_id_to_uuid(apps, schema_editor):
    # This migration handles the case where the database was created with bigint IDs
    # but the model expects UUID IDs - only needed for PostgreSQL
    db_alias = schema_editor.connection.alias
    vendor = schema_editor.connection.vendor
    
    # Only run this migration on PostgreSQL
    if vendor != 'postgresql':
        return
    
    with schema_editor.connection.cursor() as cursor:
        cursor.execute("SELECT column_name, data_type FROM information_schema.columns WHERE table_name='recommendations_recommendationrequest' AND column_name='id'")
        result = cursor.fetchone()
        
        if result and result[1] in ('bigint', 'integer'):
            # We have bigint/integer IDs, need to convert to UUID
            # First, add a temporary UUID column
            cursor.execute("ALTER TABLE recommendations_recommendationrequest ADD COLUMN temp_id UUID")
            
            # Update existing records with new UUIDs and cascade to related tables
            cursor.execute("SELECT id FROM recommendations_recommendationrequest ORDER BY id")
            old_ids = [row[0] for row in cursor.fetchall()]
            
            for old_id in old_ids:
                new_uuid = str(uuid.uuid4())
                # Update the temp_id column
                cursor.execute("UPDATE recommendations_recommendationrequest SET temp_id = %s WHERE id = %s", [new_uuid, old_id])
                # Update related BookRecommendation records
                cursor.execute("UPDATE recommendations_bookrecommendation SET request_id = %s WHERE request_id = %s", [new_uuid, old_id])
            
            # Drop the old id column and rename temp_id to id
            cursor.execute("ALTER TABLE recommendations_recommendationrequest DROP CONSTRAINT recommendations_recommendationrequest_pkey")
            cursor.execute("ALTER TABLE recommendations_recommendationrequest DROP COLUMN id")
            cursor.execute("ALTER TABLE recommendations_recommendationrequest RENAME COLUMN temp_id TO id")
            cursor.execute("ALTER TABLE recommendations_recommendationrequest ADD PRIMARY KEY (id)")
            
            # Update the foreign key constraint
            cursor.execute("ALTER TABLE recommendations_bookrecommendation DROP CONSTRAINT recommendations_bookrecommendation_request_id_fkey")
            cursor.execute("ALTER TABLE recommendations_bookrecommendation ADD CONSTRAINT recommendations_bookrecommendation_request_id_fkey FOREIGN KEY (request_id) REFERENCES recommendations_recommendationrequest(id) ON DELETE CASCADE")


def reverse_migrate_uuid_to_id(apps, schema_editor):
    # This is a destructive reverse migration - we can't reliably convert UUIDs back to bigints
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('recommendations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_id_to_uuid, reverse_migrate_uuid_to_id),
    ]
